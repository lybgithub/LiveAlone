下面提到的所有origin都是远程仓库的别名，可以在init本地仓库生成的.git里面的config文件进行修改，也可以在关联远程
仓库使用：git remote repoName sshPath(用户名|仓库名).git

git config --global user.name "yanbiao"
git config --global user.email "2664984195@qq.com"

建立空仓：
mkdir file
cd file
pwd
git init
放入文件：
git add test.txt
在txt文件里面修改之后，回到T里面提交文件修改。
提交文件修改：
git commit -m “what you want to do”

查看文件的状态：
git status

1、文件如果已经改动，会提示modified： filename.txt
2、文件如果修改之后没有提交，会提示没有not staged commit

查看文件的修改的不同点：
git diff

查看修改的历史记录：
git log --pretty=oneline


通过查找到的历史记录，可以回到前面的历史文档:
git reset --hard HEAD(当前版本)  HEAD^ HEAD^^ HEAD~100

回到历史文档之后，会发现git log里面看不到最新的文档了，这时候可以使用git reset --hard 3628164，只需要记住之前的版本号就可以了。

git reflog：查看历史命令，这样就能看到之前所有版本文档的版本号，可以选择任意一个版本作为当前版本。
cat test.txt:查看对应文档内容

git checkout -- test.txt:还原修改之前的版本，也就是版本库里面的版本，就是HEAD指向的版本。

删除文件：git rm test.txt

把本地的仓库远端嫁接到远程仓库：
git remote add origin git@github.com:icanseeeverythings（github用户名）/learningit（本地设置的仓库）.git

把本地库的内容推到远程库上去:
git push -u origin master 
git push (远程仓库名) (分支名)
如果只有一个远程分支，除了第一次需要使用后面的参数，后面就可以把上面的其他参数省去，只使用git push就可以完成上传。

经常使用的git操作：
git branch -a   					查看所有分支
git add .							add所有修改
git commit -m "commit message"		提交所有add的内容
git push -u origin master			推送的远程仓库的某一个分支
注意：修改文件之前，如果在github上修改了某个东西，一定要先pull下来，不然的话不能成功push上去，因为两个仓库中的内容是有冲突的。
git pull origin master				从远程仓库origin（在关联仓库的时候设置的）的master分支上把所有的东西拉下来
git branch -r -d origin/branch-name
git push origin :branch-name
git branch -d localBranch        	删除本地分支
建立远程分支的话，可以先建立一个新的本地分支，然后git push origin localBranch,就会自动在远程生成对应的分支


如果在本地建立一个新的文件夹，那么文件夹里面至少有一个txt，不然不能git push之后远程仓库中也有对应的folder

经验：
1、想要把远端的分支更新到本地，最好：先checkout到这个本地分支，然后git pull把远端分支的更新到本地。
2、想要把本地的东西推到远端的分支，需要先add、commit到本地的仓库之后，再git push到远端对应的分支
3、如果想把本地另一个的分支的更新也添加到自己的分支：这时候一定要在你自己的分支上先commit之后，再执行merge操作，不然如果直接执行merge操作，会使自己原来分支上的东西不被保存！
4、在A分支上创建一个新的分支B，这时候，B分支上的内容和A分支上的内容是一致同步的

git checkout branch:在这个分支上进行代码的修改，并且commit之后，会在这个版本库里面独有，也就是再checkout到其他的分支，之前commit的东西会没有
git checkout -b branchName:这个分支的版本库会和当前分支的完全一样

把远程的最新版本库，覆盖自己本地分支的版本库：
1、git pull:把远程所有分支拉到本地的对应分支（这种不指明远程分支的模式，可以把所有的远程分支自动在本地建立关联分支）
2、git branch -a：查看所有分支
3、git checkout master:切换到最新版本对应的分支
4、git branch -d lyb:把之前的分支删掉
5、git checkout -b lyb:从最新的master分支复制出来lyb分支，完成分支内容的覆盖。
之所以需要上面的操作是因为：如果直接merge，有的时候会有conflict，也就是说，你本地的当前分支，会有最新分支上没有的内容，也就导致不能进行合并！

git push之前切记要git commit一下！！不然的话还是没有修改！



